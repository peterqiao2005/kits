- name: Join all nodes to the kubernetes cluster
  hosts: all
  environment:
    PATH: "/snap/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  tasks:
    - name: Get primary node wireguard IP
      ansible.builtin.set_fact:
        primary_wg_ip: "{{ hostvars[item]['wireguard_ip'] }}"
      when: hostvars[item]['is_primary'] | bool
      with_items: "{{ groups['all'] }}"
      run_once: true

    - name: Ping primary node from non-primary nodes
      ansible.builtin.command: ping -c 1 {{ primary_wg_ip }}
      register: ping_result
      until: ping_result.rc == 0
      retries: 3
      delay: 5
      when: not (is_primary | bool)
      failed_when: ping_result.rc != 0

    - name: Fail if primary node is not pingable
      ansible.builtin.fail:
        msg: "Cannot ping primary node at {{ primary_wg_ip }} from {{ inventory_hostname }}"
      when:
        - not (is_primary | bool)
        - ping_result.failed

    - name: Make sure node advertises the WG IP
      shell: microk8s kubectl annotate node {{ inventory_hostname }} "kubeadm.alpha.kubernetes.io/internal-ip={{ wireguard_ip }}" --overwrite
      when: is_primary | bool

    - name: Check if node is already part of cluster
      shell: microk8s status | grep "acting as a node in a cluster"
      register: cluster_check
      failed_when: false
      changed_when: false
      when: not is_primary | bool

    - name: Get cluster join command
      shell: microk8s add-node --token-ttl 600
      register: join_command
      when: is_primary | bool

    - name: Extract join string
      set_fact:
        join_string: "{{ join_command.stdout | regex_search('microk8s join 192.168[^ ]+') }}"
      when: is_primary | bool

    - name: Share join command with other plays
      set_fact:
        join_command: "{{ join_string }}"
      delegate_to: localhost
      delegate_facts: true
      when: is_primary | bool

    - name: Join cluster as worker node
      shell: "{{ hostvars['localhost']['join_command'] | replace('\n', '') }} --worker --skip-verify"
      when:
        - not is_primary | bool
        - cluster_check.rc != 0

    - name: Wait for node to be ready
      shell: "microk8s kubectl get nodes {{ item }} --no-headers | grep -w Ready"
      register: node_ready
      until: node_ready.rc == 0
      retries: 30
      delay: 10
      when: is_primary | bool
      loop: "{{ groups['all'] }}"

    - name: Label nodes with external IP
      shell: "microk8s kubectl label nodes {{ item }} chutes/external-ip={{ hostvars[item].external_ip }} --overwrite"
      when: is_primary | bool
      loop: "{{ groups['all'] }}"
